//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.12.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Grammar.g4 by ANTLR 4.12.0

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using IToken = Antlr4.Runtime.IToken;

/// <summary>
/// This interface defines a complete generic visitor for a parse tree produced
/// by <see cref="GrammarParser"/>.
/// </summary>
/// <typeparam name="Result">The return type of the visit operation.</typeparam>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.12.0")]
[System.CLSCompliant(false)]
public interface IGrammarVisitor<Result> : IParseTreeVisitor<Result> {
	/// <summary>
	/// Visit a parse tree produced by <see cref="GrammarParser.program"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitProgram([NotNull] GrammarParser.ProgramContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="GrammarParser.declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitDeclaration([NotNull] GrammarParser.DeclarationContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>assignnew</c>
	/// labeled alternative in <see cref="GrammarParser.assignment"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitAssignnew([NotNull] GrammarParser.AssignnewContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>assigndec</c>
	/// labeled alternative in <see cref="GrammarParser.assignment"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitAssigndec([NotNull] GrammarParser.AssigndecContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>ifelse</c>
	/// labeled alternative in <see cref="GrammarParser.ifstmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitIfelse([NotNull] GrammarParser.IfelseContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>ifthen</c>
	/// labeled alternative in <see cref="GrammarParser.ifstmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitIfthen([NotNull] GrammarParser.IfthenContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="GrammarParser.whilestmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitWhilestmt([NotNull] GrammarParser.WhilestmtContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="GrammarParser.block"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitBlock([NotNull] GrammarParser.BlockContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>sortexpression</c>
	/// labeled alternative in <see cref="GrammarParser.sortingexpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitSortexpression([NotNull] GrammarParser.SortexpressionContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>maxexpression</c>
	/// labeled alternative in <see cref="GrammarParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitMaxexpression([NotNull] GrammarParser.MaxexpressionContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>averageexpression</c>
	/// labeled alternative in <see cref="GrammarParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitAverageexpression([NotNull] GrammarParser.AverageexpressionContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>varexpression</c>
	/// labeled alternative in <see cref="GrammarParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitVarexpression([NotNull] GrammarParser.VarexpressionContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>constantexpression</c>
	/// labeled alternative in <see cref="GrammarParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitConstantexpression([NotNull] GrammarParser.ConstantexpressionContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>operatorexpression</c>
	/// labeled alternative in <see cref="GrammarParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitOperatorexpression([NotNull] GrammarParser.OperatorexpressionContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>sumexpression</c>
	/// labeled alternative in <see cref="GrammarParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitSumexpression([NotNull] GrammarParser.SumexpressionContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>booleanexpression</c>
	/// labeled alternative in <see cref="GrammarParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitBooleanexpression([NotNull] GrammarParser.BooleanexpressionContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>minexpression</c>
	/// labeled alternative in <see cref="GrammarParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitMinexpression([NotNull] GrammarParser.MinexpressionContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>countexpression</c>
	/// labeled alternative in <see cref="GrammarParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitCountexpression([NotNull] GrammarParser.CountexpressionContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>condexpression</c>
	/// labeled alternative in <see cref="GrammarParser.conditionalexpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitCondexpression([NotNull] GrammarParser.CondexpressionContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="GrammarParser.sum"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitSum([NotNull] GrammarParser.SumContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="GrammarParser.average"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitAverage([NotNull] GrammarParser.AverageContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="GrammarParser.min"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitMin([NotNull] GrammarParser.MinContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="GrammarParser.max"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitMax([NotNull] GrammarParser.MaxContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="GrammarParser.count"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitCount([NotNull] GrammarParser.CountContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="GrammarParser.sort"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitSort([NotNull] GrammarParser.SortContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="GrammarParser.constant"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitConstant([NotNull] GrammarParser.ConstantContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="GrammarParser.types"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitTypes([NotNull] GrammarParser.TypesContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="GrammarParser.operator"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitOperator([NotNull] GrammarParser.OperatorContext context);
}
