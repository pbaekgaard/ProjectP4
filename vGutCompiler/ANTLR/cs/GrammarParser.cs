//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.12.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Grammar.g4 by ANTLR 4.12.0

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.12.0")]
[System.CLSCompliant(false)]
public partial class GrammarParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		NUMBERDCL=1, BOOLDCL=2, TEXTDCL=3, STRING=4, INTEGER=5, FLOAT=6, BOOL=7, 
		NULL=8, IF=9, THEN=10, ELSE=11, ENDIF=12, WHILE=13, ENDWHILE=14, DO=15, 
		AND=16, SUM=17, AVERAGE=18, MIN=19, MAX=20, SORT=21, COUNT=22, OR=23, 
		ASSIGN=24, LESSTHAN=25, GREATERTHAN=26, COMPEQUAL=27, LESSEQUAL=28, GREATEREQUAL=29, 
		NOTEQUAL=30, PLUS=31, MINUS=32, MULTIPLICATION=33, DIVISON=34, MODULO=35, 
		LPARENTHESIS=36, RPARENTHESIS=37, LSQUAREP=38, RSQUAREP=39, LBRACKET=40, 
		RBRACKET=41, COLON=42, COMMA=43, COMMENT=44, VAR=45, WS=46;
	public const int
		RULE_program = 0, RULE_declaration = 1, RULE_assignment = 2, RULE_ifstmt = 3, 
		RULE_whilestmt = 4, RULE_block = 5, RULE_expression = 6, RULE_conditionalexpression = 7, 
		RULE_sum = 8, RULE_average = 9, RULE_min = 10, RULE_max = 11, RULE_count = 12, 
		RULE_sort = 13, RULE_constant = 14, RULE_types = 15, RULE_operator = 16;
	public static readonly string[] ruleNames = {
		"program", "declaration", "assignment", "ifstmt", "whilestmt", "block", 
		"expression", "conditionalexpression", "sum", "average", "min", "max", 
		"count", "sort", "constant", "types", "operator"
	};

	private static readonly string[] _LiteralNames = {
		null, "'number'", "'bool'", "'text'", null, null, null, null, "'null'", 
		"'if'", "'then'", "'else'", "'endif'", "'while'", "'endwhile'", "'do'", 
		"'AND'", "'SUM'", "'AVERAGE'", "'MIN'", "'MAX'", "'SORT'", "'COUNT'", 
		"'OR'", "'='", "'<'", "'>'", "'=='", "'<='", "'>='", "'!='", "'+'", "'-'", 
		"'*'", "'/'", "'%'", "'('", "')'", "'['", "']'", "'{'", "'}'", "':'", 
		"','"
	};
	private static readonly string[] _SymbolicNames = {
		null, "NUMBERDCL", "BOOLDCL", "TEXTDCL", "STRING", "INTEGER", "FLOAT", 
		"BOOL", "NULL", "IF", "THEN", "ELSE", "ENDIF", "WHILE", "ENDWHILE", "DO", 
		"AND", "SUM", "AVERAGE", "MIN", "MAX", "SORT", "COUNT", "OR", "ASSIGN", 
		"LESSTHAN", "GREATERTHAN", "COMPEQUAL", "LESSEQUAL", "GREATEREQUAL", "NOTEQUAL", 
		"PLUS", "MINUS", "MULTIPLICATION", "DIVISON", "MODULO", "LPARENTHESIS", 
		"RPARENTHESIS", "LSQUAREP", "RSQUAREP", "LBRACKET", "RBRACKET", "COLON", 
		"COMMA", "COMMENT", "VAR", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Grammar.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static GrammarParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public GrammarParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public GrammarParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(GrammarParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationContext[] declaration() {
			return GetRuleContexts<DeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationContext declaration(int i) {
			return GetRuleContext<DeclarationContext>(i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 37;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 35184372097550L) != 0)) {
				{
				{
				State = 34;
				declaration();
				}
				}
				State = 39;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 40;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IfstmtContext ifstmt() {
			return GetRuleContext<IfstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhilestmtContext whilestmt() {
			return GetRuleContext<WhilestmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentContext assignment() {
			return GetRuleContext<AssignmentContext>(0);
		}
		public DeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationContext declaration() {
		DeclarationContext _localctx = new DeclarationContext(Context, State);
		EnterRule(_localctx, 2, RULE_declaration);
		try {
			State = 45;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IF:
				EnterOuterAlt(_localctx, 1);
				{
				State = 42;
				ifstmt();
				}
				break;
			case WHILE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 43;
				whilestmt();
				}
				break;
			case NUMBERDCL:
			case BOOLDCL:
			case TEXTDCL:
			case VAR:
				EnterOuterAlt(_localctx, 3);
				{
				State = 44;
				assignment();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentContext : ParserRuleContext {
		public AssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment; } }
	 
		public AssignmentContext() { }
		public virtual void CopyFrom(AssignmentContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class AssignnewContext : AssignmentContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypesContext types() {
			return GetRuleContext<TypesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR() { return GetToken(GrammarParser.VAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(GrammarParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public AssignnewContext(AssignmentContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignnew(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AssigndecContext : AssignmentContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR() { return GetToken(GrammarParser.VAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(GrammarParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public AssigndecContext(AssignmentContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssigndec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentContext assignment() {
		AssignmentContext _localctx = new AssignmentContext(Context, State);
		EnterRule(_localctx, 4, RULE_assignment);
		try {
			State = 55;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NUMBERDCL:
			case BOOLDCL:
			case TEXTDCL:
				_localctx = new AssignnewContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 47;
				types();
				State = 48;
				Match(VAR);
				State = 49;
				Match(ASSIGN);
				State = 50;
				expression(0);
				}
				break;
			case VAR:
				_localctx = new AssigndecContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 52;
				Match(VAR);
				State = 53;
				Match(ASSIGN);
				State = 54;
				expression(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfstmtContext : ParserRuleContext {
		public IfstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifstmt; } }
	 
		public IfstmtContext() { }
		public virtual void CopyFrom(IfstmtContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class IfthenContext : IfstmtContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(GrammarParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConditionalexpressionContext conditionalexpression() {
			return GetRuleContext<ConditionalexpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THEN() { return GetToken(GrammarParser.THEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENDIF() { return GetToken(GrammarParser.ENDIF, 0); }
		public IfthenContext(IfstmtContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfthen(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IfelseContext : IfstmtContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(GrammarParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConditionalexpressionContext conditionalexpression() {
			return GetRuleContext<ConditionalexpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THEN() { return GetToken(GrammarParser.THEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext[] block() {
			return GetRuleContexts<BlockContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block(int i) {
			return GetRuleContext<BlockContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(GrammarParser.ELSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENDIF() { return GetToken(GrammarParser.ENDIF, 0); }
		public IfelseContext(IfstmtContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfelse(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfstmtContext ifstmt() {
		IfstmtContext _localctx = new IfstmtContext(Context, State);
		EnterRule(_localctx, 6, RULE_ifstmt);
		try {
			State = 71;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				_localctx = new IfelseContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 57;
				Match(IF);
				State = 58;
				conditionalexpression();
				State = 59;
				Match(THEN);
				State = 60;
				block();
				State = 61;
				Match(ELSE);
				State = 62;
				block();
				State = 63;
				Match(ENDIF);
				}
				break;
			case 2:
				_localctx = new IfthenContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 65;
				Match(IF);
				State = 66;
				conditionalexpression();
				State = 67;
				Match(THEN);
				State = 68;
				block();
				State = 69;
				Match(ENDIF);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhilestmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHILE() { return GetToken(GrammarParser.WHILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConditionalexpressionContext conditionalexpression() {
			return GetRuleContext<ConditionalexpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DO() { return GetToken(GrammarParser.DO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENDWHILE() { return GetToken(GrammarParser.ENDWHILE, 0); }
		public WhilestmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whilestmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhilestmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhilestmtContext whilestmt() {
		WhilestmtContext _localctx = new WhilestmtContext(Context, State);
		EnterRule(_localctx, 8, RULE_whilestmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 73;
			Match(WHILE);
			State = 74;
			conditionalexpression();
			State = 75;
			Match(DO);
			State = 76;
			block();
			State = 77;
			Match(ENDWHILE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationContext[] declaration() {
			return GetRuleContexts<DeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationContext declaration(int i) {
			return GetRuleContext<DeclarationContext>(i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 10, RULE_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 82;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 35184372097550L) != 0)) {
				{
				{
				State = 79;
				declaration();
				}
				}
				State = 84;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class MaxexpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public MaxContext max() {
			return GetRuleContext<MaxContext>(0);
		}
		public MaxexpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMaxexpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AverageexpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public AverageContext average() {
			return GetRuleContext<AverageContext>(0);
		}
		public AverageexpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAverageexpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VarexpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR() { return GetToken(GrammarParser.VAR, 0); }
		public VarexpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarexpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ConstantexpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ConstantContext constant() {
			return GetRuleContext<ConstantContext>(0);
		}
		public ConstantexpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstantexpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class OperatorexpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OperatorContext @operator() {
			return GetRuleContext<OperatorContext>(0);
		}
		public OperatorexpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperatorexpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SumexpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public SumContext sum() {
			return GetRuleContext<SumContext>(0);
		}
		public SumexpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSumexpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BooleanexpressionContext : ExpressionContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESSTHAN() { return GetToken(GrammarParser.LESSTHAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATERTHAN() { return GetToken(GrammarParser.GREATERTHAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMPEQUAL() { return GetToken(GrammarParser.COMPEQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESSEQUAL() { return GetToken(GrammarParser.LESSEQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATEREQUAL() { return GetToken(GrammarParser.GREATEREQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOTEQUAL() { return GetToken(GrammarParser.NOTEQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(GrammarParser.AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(GrammarParser.OR, 0); }
		public BooleanexpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBooleanexpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MinexpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public MinContext min() {
			return GetRuleContext<MinContext>(0);
		}
		public MinexpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMinexpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SortexpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public SortContext sort() {
			return GetRuleContext<SortContext>(0);
		}
		public SortexpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSortexpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CountexpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public CountContext count() {
			return GetRuleContext<CountContext>(0);
		}
		public CountexpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCountexpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 12;
		EnterRecursionRule(_localctx, 12, RULE_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 94;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SUM:
				{
				_localctx = new SumexpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 86;
				sum();
				}
				break;
			case AVERAGE:
				{
				_localctx = new AverageexpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 87;
				average();
				}
				break;
			case MIN:
				{
				_localctx = new MinexpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 88;
				min();
				}
				break;
			case MAX:
				{
				_localctx = new MaxexpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 89;
				max();
				}
				break;
			case SORT:
				{
				_localctx = new SortexpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 90;
				sort();
				}
				break;
			case COUNT:
				{
				_localctx = new CountexpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 91;
				count();
				}
				break;
			case STRING:
			case INTEGER:
			case FLOAT:
			case BOOL:
			case NULL:
				{
				_localctx = new ConstantexpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 92;
				constant();
				}
				break;
			case VAR:
				{
				_localctx = new VarexpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 93;
				Match(VAR);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 126;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 124;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
					case 1:
						{
						_localctx = new OperatorexpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 96;
						if (!(Precpred(Context, 12))) throw new FailedPredicateException(this, "Precpred(Context, 12)");
						State = 97;
						@operator();
						State = 98;
						expression(13);
						}
						break;
					case 2:
						{
						_localctx = new BooleanexpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 100;
						if (!(Precpred(Context, 11))) throw new FailedPredicateException(this, "Precpred(Context, 11)");
						State = 101;
						((BooleanexpressionContext)_localctx).op = Match(LESSTHAN);
						State = 102;
						expression(12);
						}
						break;
					case 3:
						{
						_localctx = new BooleanexpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 103;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						State = 104;
						((BooleanexpressionContext)_localctx).op = Match(GREATERTHAN);
						State = 105;
						expression(11);
						}
						break;
					case 4:
						{
						_localctx = new BooleanexpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 106;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 107;
						((BooleanexpressionContext)_localctx).op = Match(COMPEQUAL);
						State = 108;
						expression(10);
						}
						break;
					case 5:
						{
						_localctx = new BooleanexpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 109;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 110;
						((BooleanexpressionContext)_localctx).op = Match(LESSEQUAL);
						State = 111;
						expression(9);
						}
						break;
					case 6:
						{
						_localctx = new BooleanexpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 112;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 113;
						((BooleanexpressionContext)_localctx).op = Match(GREATEREQUAL);
						State = 114;
						expression(8);
						}
						break;
					case 7:
						{
						_localctx = new BooleanexpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 115;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 116;
						((BooleanexpressionContext)_localctx).op = Match(NOTEQUAL);
						State = 117;
						expression(7);
						}
						break;
					case 8:
						{
						_localctx = new BooleanexpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 118;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 119;
						((BooleanexpressionContext)_localctx).op = Match(AND);
						State = 120;
						expression(6);
						}
						break;
					case 9:
						{
						_localctx = new BooleanexpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 121;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 122;
						((BooleanexpressionContext)_localctx).op = Match(OR);
						State = 123;
						expression(5);
						}
						break;
					}
					} 
				}
				State = 128;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ConditionalexpressionContext : ParserRuleContext {
		public ConditionalexpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conditionalexpression; } }
	 
		public ConditionalexpressionContext() { }
		public virtual void CopyFrom(ConditionalexpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class CondexpressionContext : ConditionalexpressionContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESSTHAN() { return GetToken(GrammarParser.LESSTHAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATERTHAN() { return GetToken(GrammarParser.GREATERTHAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMPEQUAL() { return GetToken(GrammarParser.COMPEQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESSEQUAL() { return GetToken(GrammarParser.LESSEQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATEREQUAL() { return GetToken(GrammarParser.GREATEREQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOTEQUAL() { return GetToken(GrammarParser.NOTEQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(GrammarParser.AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(GrammarParser.OR, 0); }
		public CondexpressionContext(ConditionalexpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCondexpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConditionalexpressionContext conditionalexpression() {
		ConditionalexpressionContext _localctx = new ConditionalexpressionContext(Context, State);
		EnterRule(_localctx, 14, RULE_conditionalexpression);
		try {
			State = 161;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
			case 1:
				_localctx = new CondexpressionContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 129;
				expression(0);
				State = 130;
				((CondexpressionContext)_localctx).op = Match(LESSTHAN);
				State = 131;
				expression(0);
				}
				break;
			case 2:
				_localctx = new CondexpressionContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 133;
				expression(0);
				State = 134;
				((CondexpressionContext)_localctx).op = Match(GREATERTHAN);
				State = 135;
				expression(0);
				}
				break;
			case 3:
				_localctx = new CondexpressionContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 137;
				expression(0);
				State = 138;
				((CondexpressionContext)_localctx).op = Match(COMPEQUAL);
				State = 139;
				expression(0);
				}
				break;
			case 4:
				_localctx = new CondexpressionContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 141;
				expression(0);
				State = 142;
				((CondexpressionContext)_localctx).op = Match(LESSEQUAL);
				State = 143;
				expression(0);
				}
				break;
			case 5:
				_localctx = new CondexpressionContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 145;
				expression(0);
				State = 146;
				((CondexpressionContext)_localctx).op = Match(GREATEREQUAL);
				State = 147;
				expression(0);
				}
				break;
			case 6:
				_localctx = new CondexpressionContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 149;
				expression(0);
				State = 150;
				((CondexpressionContext)_localctx).op = Match(NOTEQUAL);
				State = 151;
				expression(0);
				}
				break;
			case 7:
				_localctx = new CondexpressionContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 153;
				expression(0);
				State = 154;
				((CondexpressionContext)_localctx).op = Match(AND);
				State = 155;
				expression(0);
				}
				break;
			case 8:
				_localctx = new CondexpressionContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 157;
				expression(0);
				State = 158;
				((CondexpressionContext)_localctx).op = Match(OR);
				State = 159;
				expression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SumContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUM() { return GetToken(GrammarParser.SUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPARENTHESIS() { return GetToken(GrammarParser.LPARENTHESIS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] VAR() { return GetTokens(GrammarParser.VAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR(int i) {
			return GetToken(GrammarParser.VAR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(GrammarParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPARENTHESIS() { return GetToken(GrammarParser.RPARENTHESIS, 0); }
		public SumContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sum; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSum(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SumContext sum() {
		SumContext _localctx = new SumContext(Context, State);
		EnterRule(_localctx, 16, RULE_sum);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 163;
			Match(SUM);
			State = 164;
			Match(LPARENTHESIS);
			State = 165;
			Match(VAR);
			State = 166;
			Match(COLON);
			State = 167;
			Match(VAR);
			State = 168;
			Match(RPARENTHESIS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AverageContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AVERAGE() { return GetToken(GrammarParser.AVERAGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPARENTHESIS() { return GetToken(GrammarParser.LPARENTHESIS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] VAR() { return GetTokens(GrammarParser.VAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR(int i) {
			return GetToken(GrammarParser.VAR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(GrammarParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPARENTHESIS() { return GetToken(GrammarParser.RPARENTHESIS, 0); }
		public AverageContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_average; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAverage(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AverageContext average() {
		AverageContext _localctx = new AverageContext(Context, State);
		EnterRule(_localctx, 18, RULE_average);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 170;
			Match(AVERAGE);
			State = 171;
			Match(LPARENTHESIS);
			State = 172;
			Match(VAR);
			State = 173;
			Match(COLON);
			State = 174;
			Match(VAR);
			State = 175;
			Match(RPARENTHESIS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MinContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MIN() { return GetToken(GrammarParser.MIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPARENTHESIS() { return GetToken(GrammarParser.LPARENTHESIS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] VAR() { return GetTokens(GrammarParser.VAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR(int i) {
			return GetToken(GrammarParser.VAR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(GrammarParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPARENTHESIS() { return GetToken(GrammarParser.RPARENTHESIS, 0); }
		public MinContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_min; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMin(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MinContext min() {
		MinContext _localctx = new MinContext(Context, State);
		EnterRule(_localctx, 20, RULE_min);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 177;
			Match(MIN);
			State = 178;
			Match(LPARENTHESIS);
			State = 179;
			Match(VAR);
			State = 180;
			Match(COLON);
			State = 181;
			Match(VAR);
			State = 182;
			Match(RPARENTHESIS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MaxContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAX() { return GetToken(GrammarParser.MAX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPARENTHESIS() { return GetToken(GrammarParser.LPARENTHESIS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] VAR() { return GetTokens(GrammarParser.VAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR(int i) {
			return GetToken(GrammarParser.VAR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(GrammarParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPARENTHESIS() { return GetToken(GrammarParser.RPARENTHESIS, 0); }
		public MaxContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_max; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMax(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MaxContext max() {
		MaxContext _localctx = new MaxContext(Context, State);
		EnterRule(_localctx, 22, RULE_max);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 184;
			Match(MAX);
			State = 185;
			Match(LPARENTHESIS);
			State = 186;
			Match(VAR);
			State = 187;
			Match(COLON);
			State = 188;
			Match(VAR);
			State = 189;
			Match(RPARENTHESIS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CountContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COUNT() { return GetToken(GrammarParser.COUNT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPARENTHESIS() { return GetToken(GrammarParser.LPARENTHESIS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] VAR() { return GetTokens(GrammarParser.VAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR(int i) {
			return GetToken(GrammarParser.VAR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(GrammarParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPARENTHESIS() { return GetToken(GrammarParser.RPARENTHESIS, 0); }
		public CountContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_count; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCount(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CountContext count() {
		CountContext _localctx = new CountContext(Context, State);
		EnterRule(_localctx, 24, RULE_count);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 191;
			Match(COUNT);
			State = 192;
			Match(LPARENTHESIS);
			State = 193;
			Match(VAR);
			State = 194;
			Match(COLON);
			State = 195;
			Match(VAR);
			State = 196;
			Match(RPARENTHESIS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SortContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SORT() { return GetToken(GrammarParser.SORT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPARENTHESIS() { return GetToken(GrammarParser.LPARENTHESIS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] VAR() { return GetTokens(GrammarParser.VAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR(int i) {
			return GetToken(GrammarParser.VAR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(GrammarParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(GrammarParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(GrammarParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOL() { return GetToken(GrammarParser.BOOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPARENTHESIS() { return GetToken(GrammarParser.RPARENTHESIS, 0); }
		public SortContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sort; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSort(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SortContext sort() {
		SortContext _localctx = new SortContext(Context, State);
		EnterRule(_localctx, 26, RULE_sort);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 198;
			Match(SORT);
			State = 199;
			Match(LPARENTHESIS);
			State = 200;
			Match(VAR);
			State = 201;
			Match(COLON);
			State = 202;
			Match(VAR);
			State = 203;
			Match(COMMA);
			State = 204;
			Match(VAR);
			State = 205;
			Match(COMMA);
			State = 206;
			Match(BOOL);
			State = 207;
			Match(RPARENTHESIS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstantContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER() { return GetToken(GrammarParser.INTEGER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT() { return GetToken(GrammarParser.FLOAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOL() { return GetToken(GrammarParser.BOOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(GrammarParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL() { return GetToken(GrammarParser.NULL, 0); }
		public ConstantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constant; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstant(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstantContext constant() {
		ConstantContext _localctx = new ConstantContext(Context, State);
		EnterRule(_localctx, 28, RULE_constant);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 209;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 496L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBERDCL() { return GetToken(GrammarParser.NUMBERDCL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOLDCL() { return GetToken(GrammarParser.BOOLDCL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEXTDCL() { return GetToken(GrammarParser.TEXTDCL, 0); }
		public TypesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_types; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypes(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypesContext types() {
		TypesContext _localctx = new TypesContext(Context, State);
		EnterRule(_localctx, 30, RULE_types);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 211;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 14L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(GrammarParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(GrammarParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(GrammarParser.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULTIPLICATION() { return GetToken(GrammarParser.MULTIPLICATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIVISON() { return GetToken(GrammarParser.DIVISON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MODULO() { return GetToken(GrammarParser.MODULO, 0); }
		public OperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperatorContext @operator() {
		OperatorContext _localctx = new OperatorContext(Context, State);
		EnterRule(_localctx, 32, RULE_operator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 213;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 66588770304L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 6: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 12);
		case 1: return Precpred(Context, 11);
		case 2: return Precpred(Context, 10);
		case 3: return Precpred(Context, 9);
		case 4: return Precpred(Context, 8);
		case 5: return Precpred(Context, 7);
		case 6: return Precpred(Context, 6);
		case 7: return Precpred(Context, 5);
		case 8: return Precpred(Context, 4);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,46,216,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,1,0,5,0,36,8,0,10,0,12,0,39,9,0,1,0,1,0,1,1,1,1,1,
		1,3,1,46,8,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,3,2,56,8,2,1,3,1,3,1,3,1,
		3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,3,3,72,8,3,1,4,1,4,1,4,1,4,1,
		4,1,4,1,5,5,5,81,8,5,10,5,12,5,84,9,5,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,
		1,6,3,6,95,8,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,
		1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,5,6,125,8,6,10,
		6,12,6,128,9,6,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,
		1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,
		7,3,7,162,8,7,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,9,1,9,
		1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,11,1,11,
		1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,13,1,13,1,13,
		1,13,1,13,1,13,1,13,1,14,1,14,1,15,1,15,1,16,1,16,1,16,0,1,12,17,0,2,4,
		6,8,10,12,14,16,18,20,22,24,26,28,30,32,0,3,1,0,4,8,1,0,1,3,2,0,24,24,
		31,35,227,0,37,1,0,0,0,2,45,1,0,0,0,4,55,1,0,0,0,6,71,1,0,0,0,8,73,1,0,
		0,0,10,82,1,0,0,0,12,94,1,0,0,0,14,161,1,0,0,0,16,163,1,0,0,0,18,170,1,
		0,0,0,20,177,1,0,0,0,22,184,1,0,0,0,24,191,1,0,0,0,26,198,1,0,0,0,28,209,
		1,0,0,0,30,211,1,0,0,0,32,213,1,0,0,0,34,36,3,2,1,0,35,34,1,0,0,0,36,39,
		1,0,0,0,37,35,1,0,0,0,37,38,1,0,0,0,38,40,1,0,0,0,39,37,1,0,0,0,40,41,
		5,0,0,1,41,1,1,0,0,0,42,46,3,6,3,0,43,46,3,8,4,0,44,46,3,4,2,0,45,42,1,
		0,0,0,45,43,1,0,0,0,45,44,1,0,0,0,46,3,1,0,0,0,47,48,3,30,15,0,48,49,5,
		45,0,0,49,50,5,24,0,0,50,51,3,12,6,0,51,56,1,0,0,0,52,53,5,45,0,0,53,54,
		5,24,0,0,54,56,3,12,6,0,55,47,1,0,0,0,55,52,1,0,0,0,56,5,1,0,0,0,57,58,
		5,9,0,0,58,59,3,14,7,0,59,60,5,10,0,0,60,61,3,10,5,0,61,62,5,11,0,0,62,
		63,3,10,5,0,63,64,5,12,0,0,64,72,1,0,0,0,65,66,5,9,0,0,66,67,3,14,7,0,
		67,68,5,10,0,0,68,69,3,10,5,0,69,70,5,12,0,0,70,72,1,0,0,0,71,57,1,0,0,
		0,71,65,1,0,0,0,72,7,1,0,0,0,73,74,5,13,0,0,74,75,3,14,7,0,75,76,5,15,
		0,0,76,77,3,10,5,0,77,78,5,14,0,0,78,9,1,0,0,0,79,81,3,2,1,0,80,79,1,0,
		0,0,81,84,1,0,0,0,82,80,1,0,0,0,82,83,1,0,0,0,83,11,1,0,0,0,84,82,1,0,
		0,0,85,86,6,6,-1,0,86,95,3,16,8,0,87,95,3,18,9,0,88,95,3,20,10,0,89,95,
		3,22,11,0,90,95,3,26,13,0,91,95,3,24,12,0,92,95,3,28,14,0,93,95,5,45,0,
		0,94,85,1,0,0,0,94,87,1,0,0,0,94,88,1,0,0,0,94,89,1,0,0,0,94,90,1,0,0,
		0,94,91,1,0,0,0,94,92,1,0,0,0,94,93,1,0,0,0,95,126,1,0,0,0,96,97,10,12,
		0,0,97,98,3,32,16,0,98,99,3,12,6,13,99,125,1,0,0,0,100,101,10,11,0,0,101,
		102,5,25,0,0,102,125,3,12,6,12,103,104,10,10,0,0,104,105,5,26,0,0,105,
		125,3,12,6,11,106,107,10,9,0,0,107,108,5,27,0,0,108,125,3,12,6,10,109,
		110,10,8,0,0,110,111,5,28,0,0,111,125,3,12,6,9,112,113,10,7,0,0,113,114,
		5,29,0,0,114,125,3,12,6,8,115,116,10,6,0,0,116,117,5,30,0,0,117,125,3,
		12,6,7,118,119,10,5,0,0,119,120,5,16,0,0,120,125,3,12,6,6,121,122,10,4,
		0,0,122,123,5,23,0,0,123,125,3,12,6,5,124,96,1,0,0,0,124,100,1,0,0,0,124,
		103,1,0,0,0,124,106,1,0,0,0,124,109,1,0,0,0,124,112,1,0,0,0,124,115,1,
		0,0,0,124,118,1,0,0,0,124,121,1,0,0,0,125,128,1,0,0,0,126,124,1,0,0,0,
		126,127,1,0,0,0,127,13,1,0,0,0,128,126,1,0,0,0,129,130,3,12,6,0,130,131,
		5,25,0,0,131,132,3,12,6,0,132,162,1,0,0,0,133,134,3,12,6,0,134,135,5,26,
		0,0,135,136,3,12,6,0,136,162,1,0,0,0,137,138,3,12,6,0,138,139,5,27,0,0,
		139,140,3,12,6,0,140,162,1,0,0,0,141,142,3,12,6,0,142,143,5,28,0,0,143,
		144,3,12,6,0,144,162,1,0,0,0,145,146,3,12,6,0,146,147,5,29,0,0,147,148,
		3,12,6,0,148,162,1,0,0,0,149,150,3,12,6,0,150,151,5,30,0,0,151,152,3,12,
		6,0,152,162,1,0,0,0,153,154,3,12,6,0,154,155,5,16,0,0,155,156,3,12,6,0,
		156,162,1,0,0,0,157,158,3,12,6,0,158,159,5,23,0,0,159,160,3,12,6,0,160,
		162,1,0,0,0,161,129,1,0,0,0,161,133,1,0,0,0,161,137,1,0,0,0,161,141,1,
		0,0,0,161,145,1,0,0,0,161,149,1,0,0,0,161,153,1,0,0,0,161,157,1,0,0,0,
		162,15,1,0,0,0,163,164,5,17,0,0,164,165,5,36,0,0,165,166,5,45,0,0,166,
		167,5,42,0,0,167,168,5,45,0,0,168,169,5,37,0,0,169,17,1,0,0,0,170,171,
		5,18,0,0,171,172,5,36,0,0,172,173,5,45,0,0,173,174,5,42,0,0,174,175,5,
		45,0,0,175,176,5,37,0,0,176,19,1,0,0,0,177,178,5,19,0,0,178,179,5,36,0,
		0,179,180,5,45,0,0,180,181,5,42,0,0,181,182,5,45,0,0,182,183,5,37,0,0,
		183,21,1,0,0,0,184,185,5,20,0,0,185,186,5,36,0,0,186,187,5,45,0,0,187,
		188,5,42,0,0,188,189,5,45,0,0,189,190,5,37,0,0,190,23,1,0,0,0,191,192,
		5,22,0,0,192,193,5,36,0,0,193,194,5,45,0,0,194,195,5,42,0,0,195,196,5,
		45,0,0,196,197,5,37,0,0,197,25,1,0,0,0,198,199,5,21,0,0,199,200,5,36,0,
		0,200,201,5,45,0,0,201,202,5,42,0,0,202,203,5,45,0,0,203,204,5,43,0,0,
		204,205,5,45,0,0,205,206,5,43,0,0,206,207,5,7,0,0,207,208,5,37,0,0,208,
		27,1,0,0,0,209,210,7,0,0,0,210,29,1,0,0,0,211,212,7,1,0,0,212,31,1,0,0,
		0,213,214,7,2,0,0,214,33,1,0,0,0,9,37,45,55,71,82,94,124,126,161
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
